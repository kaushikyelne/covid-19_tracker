{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/CountryPicker/CountryPicker.jsx","components/Chart/Chart.jsx","App.js","index.js","App.module.css","components/CountryPicker/CountryPicker.module.css","components/Chart/Chart.module.css","images/image2.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableURL","axios","get","console","log","fetchCountries","countries","map","name","fetchDailyData","modifiedData","dailyData","total","date","reportDate","CountryPicker","handleCountryChange","useState","fetchedCountries","setFetchedCountries","useEffect","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","Chart","setDailyData","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c7e07e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1Tcv3\",\"card\":\"Cards_card__2gteE\",\"infected\":\"Cards_infected__1WB2v\",\"recovered\":\"Cards_recovered__2GfIn\",\"deaths\":\"Cards_deaths__3XvSm\"};","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core'\r\n\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({data : {confirmed, recovered, deaths, lastUpdate}}) => {\r\n    if(!confirmed){\r\n        return 'Loading...';\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component ={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component ={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component ={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\"/> \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url ='https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n\r\n    let changeableURL = url;\r\n    if(country){\r\n        changeableURL = `${url}/countries/${country}`;\r\n    }\r\n    try {\r\n        const { data :{ confirmed, recovered, deaths, lastUpdate} } = await axios.get(changeableURL);\r\n\r\n        return({confirmed, recovered, deaths, lastUpdate });\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async() =>{\r\n    try {\r\n        const { data : { countries }} = await axios.get(`${url}/countries`);\r\n\r\n        return countries.map((country) => country.name);\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        \r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n","import React, {useState, useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        };\r\n\r\n        fetchAPI();\r\n\r\n    }, [setFetchedCountries]);\r\n\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e)=> handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n    {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React, {useState, useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport {Line , Bar} from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data: {confirmed, recovered, deaths}, country}) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () =>\r\n        {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        console.log(dailyData);\r\n        fetchAPI();\r\n    });\r\n\r\n    const lineChart = (\r\n        dailyData.length \r\n        ? (\r\n          <Line\r\n            data ={{\r\n                labels: dailyData.map(({ date }) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({ confirmed }) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill: true,\r\n                },\r\n                {\r\n                    data: dailyData.map(({ deaths }) => deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255,0,0,0.5)',\r\n                    fill: true,\r\n                }],\r\n            }}\r\n        />): null\r\n    );\r\n\r\n    console.log(confirmed, recovered, deaths);\r\n\r\n    const barChart = (\r\n        confirmed\r\n        ? (\r\n            <Bar\r\n                data={{\r\n                    labels: ['Infected', 'Recovered', 'Deaths'],\r\n                    datasets: [{\r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(0, 0, 255, 0.8)',\r\n                            'rgba(0, 255, 0, 0.8)',\r\n                            'rgba(255, 0, 0, 0.8)',\r\n                        ],\r\n                        data : [confirmed.value, recovered.value, deaths.value]\r\n                    }]\r\n\r\n                }}\r\n                options={{\r\n                    legend:  {display: false},\r\n                    title: {display: true, text: `Current state in ${country}`},\r\n\r\n                }}\r\n            \r\n            />\r\n        ): null\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart: lineChart}\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Chart;","import React from 'react';\n\nimport {Cards, Chart, CountryPicker} from './components';\n\nimport styles from './App.module.css';\nimport { fetchData } from './api'; \n\nimport coronaImage from './images/image2.png';\n\nclass App extends React.Component {\n    state = {\n        data: {},\n        country: '',\n    }\n\n    async componentDidMount(){\n        const fetchedData = await fetchData();\n        \n        this.setState({ data : fetchedData });\n\n    }\n\n    handleCountryChange = async(country) => {\n        const fetchedData = await fetchData(country);\n\n        this.setState({ data : fetchedData, country: country });\n    }\n\n    render()\n    {\n        const { data,country } = this.state;\n        return (\n            <div className={styles.container}>\n                <img className={styles.image} src ={coronaImage} alt=\"COVID-19\" />\n                <Cards data = {data}/>\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\n                <Chart data={data} country={country}/>\n            </div >\n        );\n    }\n        \n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    //  <React.StrictMode>\n    <App />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"App_body__3TAeg\",\"container\":\"App_container__2T6hS\",\"images\":\"App_images__2_8ai\",\"image\":\"App_image__2GgFj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2PBNt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1SnYC\"};","module.exports = __webpack_public_path__ + \"static/media/image2.55356400.png\";"],"sourceRoot":""}